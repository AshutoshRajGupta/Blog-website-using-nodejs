Fromt-end(Browser)
Back-end(server)

Node allows us to run the javascript code in the backend

the role nodejs in the website to run the javascript file on the server
,handling the request coming from the browser,

why use nodejs
1.no need to learn extra language for server
2.can share code between front and backend
3.huge amount of third-party packages tools that help


create a test.js file

const name='mario';
console.log(name)

to run file-
in terminal write --node test
mario will be output.


gloabl object

//// console.log(global)

////
global.setTimeout(() => {
    console.log('in the timeout')
}, 3000);

output-

<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  queueMicrotask: [Function: queueMicrotask],
  performance: Performance {
    nodeTiming: PerformanceNodeTiming {
      name: 'node',
      entryType: 'node',
      startTime: 0,
      duration: 57.89170000003651,
      nodeStart: 1.671800000127405,
      v8Start: 5.672199999913573,
      bootstrapComplete: 41.36230000015348,
      environment: 22.427300000097603,
      loopStart: -1,
      loopExit: -1,
      idleTime: 0
    },
    timeOrigin: 1674334672919.691
  },
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  }
}
in the timeout


//setting interval
const int=setInterval(()=>{
    console.log('in the interval');
},1000)


console.log(__dirname);
console.log(__filename);


-----------------------------------------------------------------------------------------------------------------------------------
people.js
const people=['yoshi','arya','kavya','priti'];
console.log(people);
//now i have to import this file into to the modules files


modules.js
const xyz=require('./people');


------------------------------------------------------------------------------------------------------------------------------------------
// creating server

const http=require('http');


const server = http.createServer((req,res)=>{
    console.log('request made')
    //this is happening on backend side

    // set header content type
    res.setheader('Content-type','text/plain');
    res.write('hello,ninjas');
    res.end();
})


//server is listening or localhost 3000
server.listen(3000,'localhost',()=>{
    console.log('listening for requests on port 3000');
});

------------------------------------------------------------------------------------------------------------------------------------
//set header content type
res.setheader('Content-type','text/plain');
res.write('hello,ninjas');
res.end();

this is for plain text
for html tag

res.setheader('Content-type','text/html');
res.write('<p>hello,ninjas</p>');
res.end();

----------------------------------------------------------------------------------------------------------------------------------------
sending a full html page request through browser

1. creating a new folder called view
2. create index.html file inside view

const fs = require('fs');

res.setheader('Content-type','text/html');
//send a html file
fs.readFile('./view/index.html',(err,data)=>{
   if(err){
   console.log(err);
res.end();
}else{
res.write(data);
res.end();
}
})

--------------------------------------------------------------------------------------------------------------------------------------
Basic routing
1. ceate about.html and 404.html


const server = http.createServer((req,res)=>{
    console.log(req.url,req.method)
    //this is happening on backend side

    let path='./view/';
switch(req.url){
case '/':
  path+='index.html';
break;
case '/about':
  path+='about.html';
break;
default:
  path+='404.html';
break;

}
})



------------------------------------------------------------------------------------------------------------------------------------------
Status codes
-status codes describe the type of response sent to the browser
200-ok
301-resource moved
404-not found
500-internal server error


100range- informational responses
200range-sucess codes
300range-codes for redirects
400range-user or client error codes
500range-server error codes

res.statusCode=200;


 let path='./view/';
switch(req.url){
case '/':
  path+='index.html';
  res.statusCode=200;

break;
case '/about':
  path+='about.html';
  res.statusCode=200;

break;
default:
  path+='404.html';
  res.statusCode=404;

break;

}

--------------------------------------------------------------------------------------------------------------------------------------
Redirects
redirect from about-me to about


let path='./view/';
switch(req.url){
case '/':
  path+='index.html';
  res.statusCode=200;

break;
case '/about':
  path+='about.html';
  res.statusCode=200;

break;

case '/about-me':
  res.statusCode=301;
  res.setHeader('Location','/about');
  res.end();
break;
default:
  path+='404.html';
  res.statusCode=404;

break;


so now when we go to about-me it will redirect to about page


---------------------------------------------------------------------------------------------------------------------------------------

npm-node package manager

nodemon--is a package which helps us to create a live 
reload server .

npm install -g nodemon

installing globally on our computer so 
that we can use it in all the others project also.

so now to run file write 
nodemon filename


---------------------------
package-lock.json-it keeps record of all the packages 
that we install keep track of different dependencies version of our project.

npm init
-creates package.json file
this file keep track of our project dependencies and all the packages that we stored locally for this project.


----------------------------------------------------------------------------------------------------------------------------------
Express
express is a framework that help us to easily manage our routing,
requests,server-side logic and responses in a much much more
efficient way


npm install express

--------------------
creating an express app


const express = require('express');

//express app
const app=express();   // cfeating ana instance of the express app

//register view engine
app.set('view engine','ejs');


//listen to the request
app.listen(3000);

app.get('/',(req,res)=>{
    // res.send('<p>Home page</p>');
    // res.sendFile('./view/index.html',{root:__dirname});
    res.render('index',{title:'Home'})
});

app.get('/about',(req,res)=>{
    // res.send('<p>About page</p>');
    // res.sendFile('./views/about.html',{root:__dirname});
    res.render('about',{title:'About'})

});


app.get('/blogs/create',(req,res)=>{
    res.render('create',{title:'create a new blog'});
})

//redirects
// app.get('/about-us',(req,res)=>{
//     res.redirect('/about');
// })


//404 page
app.use((req,res)=>{
    // res.status(404).sendFile('./views/404.html',{root:__dirname});
    res.status(404).render('404',{title:'404'});
})
//use function is going to fire for all every single request
//it should be in the bottom of the page




-------------------------------------------------------------------------

Middleware

code which runs on the server between getting a request and a response.

-logger middleware to log details ofevery requests.
Authentication check middleware for protected routes
-middleware to parse json data from requests.
return 404 pages


morgan -its a third party middleware

----------------------------------------------------------------------

Mongodb connectibvity with node js
 npm install mongoose

//connect to mongodb
const dburi='mongodb+srv://admin:26432643@cluster0.m264ofs.mongodb.net/node-blog?retryWrites=true&w=majority';

mongoose.set("strictQuery", false);
mongoose.connect(dburi, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(result => app.listen(3000))
  .catch(err => console.log(err));
//register view engine
app.set('view engine','ejs');



// mongoose & mongo tests
// app.get('/add-blog', (req, res) => {
//     const blog = new Blog({
//       title: 'new blog',
//       snippet: 'about my new blog',
//       body: 'more about my new blog'
//     })
  
//     blog.save()
//       .then(result => {
//         res.send(result);
//       })
//       .catch(err => {
//         console.log(err);
//       });
//   });
  
//   app.get('/all-blogs', (req, res) => {
//     Blog.find()
//       .then(result => {
//         res.send(result);
//       })
//       .catch(err => {
//         console.log(err);
//       });
//   });
  
//   app.get('/single-blog', (req, res) => {
//     Blog.findById('63d13fe8e869491c6dd8ca10')
//       .then(result => {
//         res.send(result);
//       })
//       .catch(err => {
//         console.log(err);
//       });
//   });
  
-------------------------------------------------------------------------

get requests to get a resource
post requests to create a new data (new blog)
delete requests to delete a data(deletea blog)
put request to update a data (update a blog)

--------------------------------------------------------------------
mvc

stands for model view controller
way of structuring our codes and files
keep codes more modular reusable and easier to read.
